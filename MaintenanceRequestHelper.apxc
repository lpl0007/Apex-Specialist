public with sharing class MaintenanceRequestHelper {
    public static void updateworkOrders(List<Case> caseMap) {
        // TODO: Complete the method to update workorders
        Set<Id> idList = new Set<Id>();
        
        for (Case i : caseMap){
            if ((i.Type.equals('Repair') || i.Type.equals('Routine Maintenance')) && i.IsClosed){
                idList.add(i.Id);
            }
        }
        
        List<Case> caseList = new List<Case>();
        Map<Id, Decimal> maintenanceCycleMap = new Map<Id, Decimal>();
        AggregateResult[] results = [SELECT Maintenance_Request__c, MIN(Equipment__r.Maintenance_Cycle__c)cycle FROM Equipment_Maintenance_Item__c WHERE Maintenance_Request__c IN : idList GROUP BY Maintenance_Request__c];
        
        for (AggregateResult r : results){ 
            maintenanceCycleMap.put((Id) r.get('Maintenance_Request__c'), (Decimal) r.get('cycle'));
        }
        
        Map<Id, Case> closedCaseList = new Map<Id,Case>([SELECT Id, Vehicle__c,(SELECT Id,Equipment__c,Quantity__c FROM Equipment_Maintenance_Items__r) FROM Case WHERE Id IN : idList]);
        
        for(Case c : closedCaseList.values()) {
            Case tempCase = new Case();
            tempCase.Vehicle__c = c.Vehicle__c;
            tempCase.Type = 'Routine Maintenance';
            tempCase.Status = 'New';
            tempCase.Subject = 'Routine Maintenance';
            tempCase.Date_Reported__c = Date.today();
            tempCase.Date_Due__c = Date.today().addDays((Integer) maintenanceCycleMap.get(c.Id));
        }
        insert caseList;
    }        
    
}